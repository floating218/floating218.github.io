---
title : "[운영체제] 7. 가상 메모리"
excerpt : "페이징 시스템"
category :
  - os
tag :
  - os
use_math : true
author_profile : true
header:
  teaser : /assets/images/category/os.jpg
  overlay_image : /assets/images/category/os.jpg
  overlay_filter: 0.1
---

## 파일시스템

- 파일시스템: 운영체제가 저장매체에 파일을 쓰기 위한 자료구조, 알고리즘을 지칭합니다.
- 각 블록 고유 번호는 관리하기가 어렵습니다. 
- 그래서 추상적,논리적인 객체인 파일이 필요해졌습니다.
- 효율적인 파일 저장 방법: 가능한 연속적인 공간에 파일을 저장하는 것이 좋습니다.   

- 외부단편화 파일 사이즈 변경 문제로 인해 불연속 공간에 파일 저장 기능 지원이 필요합니다. 
1. 블록체인: 블록을 링크드 리스트로 연결합니다. 끝의 블록을 찾으려면 처음부터 쭉 따라가야 합니다. 
2. 인덱스블록기법: 각 블록에 대한 위치 정보를 별도 자료구조로 저장해서 한번에 블록을 찾아갈 수 있습니다. 

- 윈도우: FAT, FAT32, NTFS(많이씀) 알고리즘
블록 위치를 FAT이라는 자료 구조에 기록합니다.

- 리눅스: ext2,ext3,ext4 알고리즘
일정의 인덱스 블록 기법인 inode 방식을 사용합니다.

- 공통의 시스템콜을 사용해서 다양한 파일 시스템 알고리즘을 구현합니다.
- 시스템콜 함수
* open: 이미 존재하는 파일을 읽기/쓰기 용으로 열거나 새 파일을 생성하여 연다
* creat: 새 파일을 생성하여 연다
* close: 열려진 파일을 닫는다. 
*read: 열려진 파일로부터 데이터를 읽는다.
* write: 열려진 파일에 데이터를 쓴다. 
* lseek 파일 안에서 읽기/쓰기 포인터를 지정한 바이트 위치로 이동한다.
* unlink/remove:파일을 삭제한다

## inode 방식의 파일 시스템  
3가지의 블록타입을 가집니다.
1. 수퍼 블록: 파일 시스템 정보 (전체에 대한 정보)
2. 아이노드 블록:파일 상세 정보
3. 데이터 블록: 실제 데이터

수퍼블록
리눅스에서 df 명령
1kb블록이 몇개인지
얼마나 사용했고, 얼마나 사용가능한지

각 파일이름마다 inode번호가 할당됩니다.
파일시스템에서는 inode번호를 기반으로 파일 엑세스합니다.

프로세스생성->pid생성->pcb저장<-스케줄링을 통해 접근
파일생성->inode생성->inode블록저장<-파일처리를 통해 접근

inode기반 메타데이터
: 권한, 소유자, 사이즈, 시간, 저장 위치 등
mode, owner, size, timestamps
아이노드 불록에 저장돼 있습니다. 

cat 명령을 입력한 순간
inode번호를 찾고
inode블록에 접근합니다
내용을 출력하려면, direct block부분으로 갑니다. 여기는 12개의 주소 공간을 가집니다. 실제 데이터 블록들의 주소를 가리킵니다.

ls -al 명령어
indoe번호찾고 아이노드불록에 접근
mode, owner, size, timestamp 정보 가지고 옵니다.

indirect blocks, double indirect, triple indirect
블록 하나는 보통 1-4kb입니다.
대용량의 경우, 12개 가지고는 부족함
triple indirect->double indirect->single indirect->direct->data

디렉토리 엔트리
/ :root에서 시작함


가상 파일 시스템 virtual file system
통신 기기를 file system의 하나로 해서 마치 파일처럼 사용하게 함

