---
layout: post
title:  "스파크 아키텍쳐"
date:   2020-01-16 16:36:15 +0900
categories: spark
permalink: '/spark/archi-spark'
---

## Spark의 등장

UC버클리의 마태 자하리아가 개발한 오픈소스 처리 엔진입니다. 2012년에 처음 배포되었으며, 코드는 아파치 재단에 기부되었습니다. 

아파치 스파크란 오픈소스 분산 쿼리 및 처리 엔진입니다. 기존의 MapReduce에 비해 유연성과 확장성이 좋아서, 속도가 빠릅니다. 

스파크는 무엇을 할 수 있을 까요?
> 데이터를 읽고, 변형하고, 합하고, 통계 모델을 학습할 수 있습니다. 

스파크는 어떻게 접근할까요?
> java, scala, python, r, sql 등 다양한 언어를 통해 접근 가능합니다. 

스파크가 제공해주는 라이브러리에는 무엇이 있을까요?
> 스파크는 자체 데이터프레임을 제공합니다. python의 pandas 라이브러리, r의 frames, tables과 유사하지만 다른 점이 많습니다.
> SQL에서 사용하는 쿼리를 스파크에서도 사용할 수 있습니다. 
> 머신러닝을 위해서 MLib을 제공합니다. 
> GraphX를 통해 그래프 처리를 할 수 있습니다. 
> 스파크 스트리밍이 가능합니다. 

## 스파크의 실행 프로세스

![sparkprocess](../assets/img/spark/sparkprocess.png)

스파크는 마스터 노드와 워커 노드의 구조를 가지고 있습니다. 마스터 노드에서는 드라이브 프로세스가 실행됩니다. 

1. 드라이버 프로세스는 Executor 프로세스를 컨트롤합니다.  
2. Executor프로세스는 여러개의 task를 포함하고 있습니다.  
3. 드라이버 프로세스는 task 프로세스의 개수를 결정합니다.   
4. Executor 프로세스는 여러개의 worker 노드로 task를 분산시킵니다.   






## 스파크 응용 프로그램의 구조

> 드라이버  
> 클러스터 매니저  
> 마스터  
> 작업자 worker  
> 실행자 executer  


## 마스터/슬레이브 구조

스파크는 마스터/슬레이브 구조를 취한다. 여기서 중앙 조정자는 드라이버라고 한다. 드라이버는 여러 개의 executor와 통신한다. 


## 스파크 드라이버

스파크 드라이버는``스파크 응용 프로그램을 실행하는 데 필요한 작업을 계획하고 조정하는 프로세스``이다. 클라이언트가 준 응용 프로그램을 받아서, **실행을 계획**하며, **상태 및 데이터를 다시 클라이언트에게 반환**한다. 또한, **스파크세션**을 생성한다. 

**중요 기능**
> 응용 프로그램을 task로 변환한다. (task: 물리적 실행단위로, 하나의 노드에서 실행되는 단위다.)


> 스파크세션은 객체이다. 스파크세션 객체는 스파크 클러스터에 대한 연결을 나타낸다. 스파크세션이 가진 속성은 다음과 같다. 
> app.id, driver.port, master, app.name, executor.id 등

>### 응용 프로그램 계획
>
>드라이버는 응용 프로그램을 어떻게 실행할지 계획한다. 이를 위해 DAG(directed acyclic graph)를 작성한다. 

**응용 프로그램 조직화** 

드라이버는 작성한 DAG의 스케쥴링을 한다. 

>### 응용 프로그램의 결과 반환
>
>드라이버는 클라이언트 측에 결과 데이터를 반환한다. 포트 4040에 응용 프로그램 UI를 제공한다. 4040 포트로 진입하면 각 응용 프로그램 별 stage, task 등을 확인할 수 있다. 


## 스파크 마스터 Master

**클러스터의 리소스를 요청**하고, 이를 드라이버에서 사용할 수 있게 만드는 프로세스. 
>예를 들어, 노드에 리소스나 컨테이너를 할당하고 그 상태를 추적하며 진행 상황을 모니터링한다. 마스터 호스트:8080에 접속하면 스파크 마스터 프로세스의 웹 UI를 제공받을 수 있다. 

## 클러스터 매니저

적당한 **마스터를 응용 프로그램에 할당**한다. **worker 노드를 모니터링**하고 마스터가 요청한 대로 **worker 노드의 리소스를 예약**하는 프로세스  

>드라이버가 응용 프로그램 단위에서 조정을 하는 역할을 한다면, 마스터는 단순히 클러스터 전체 내에서 리소스를 관리하는 역할을 한다. 클러스터 매니저는 마스터에 딸린 worker들을 모니터링하고 직접 리소스를 예약한다. 



|구성 요소|역할|포트|
|-----|---|---|
|스파크 드라이버|응용 프로그램의 실행 및 단계를 조정함|4040|
|스파크 마스터|리소스를 요청해서 드라이버가 사용할 수 있게 함|8080|
|클러스터 매니저|worker노드를 모니터링하고, 마스터의 요청에 따라 worker 노드의 리소스를 예약함||


## 작업자 Worker 노드

실행자 executor 프로세스를 호스팅하는 노드를 작업자 worker 노드라고 한다. 여기에는 유한하거나 고정된 수의 실행자가 특정 시점에 할당 된다. 

## 실행자 Executor

스파크 dag 작업이 실행되는 프로세스이다. 실행자는 작업자의 cpu, 메모리 등 리소르를 예약한다. 응용 프로그램에 특화된 프로세스이며, 그 응용 프로그램이 완료되면 종료된다. 스파크 프로그램 하나는 여러개의 많은 실행자로 구성되어 있으며 병렬로 작업한다. 스파크 실행자의 JVM에는 전용 메모리 공간인 heap이 할당된다. 드라이버는 응용프로그램 전체를 관장하며, 작업자 및 실행자는 할당된 작업만 관장한다. 



### YARN(리소스 매니저=클러스터 매니저)

YARN은 하둡의 데이터 처리를 제어하고 조율하는 ``프로세스 스케줄러``이다. YARN에서 실행되는 스파크 응용 프로그램의 배포모드는 클라이언트 모드와 클러스터 모드가 있다. 
 
### 클라이언트 모드  

응용 프로그램의 드라이버 프로세스가 클라이언트에서 실행된다.  

>1. 클라이언트는 YARN(리소스 매니저)에 응용프로그램을 제출한다. 드라이버, 스파크세션이 만들어져서 클라이언트에서 실행된다.  
>2. YARN(리소스 매니저)은 응용 프로그램에 대해 스파크 마스터를 할당한다.  
>3. 스파크 마스터는 YARN에게 실행자로 사용될 컨테이너를 요청한다. 그러면 실행자가 생성된다.  
>4. 클라이언트에 속한 드라이버는 실행자와 통신한다.  
>5. 드라이버는 클라이언트에 진행률과 결과를 보고한다.    

### 클러스터 모드

응용 프로그램과 드라이브는 마스터의 하위 프로세스가 되어 클러스터에서 실행된다. 만약 마스터가 실패하면 다른 노드에서 다시 인스턴스화될 수 있다. 

>1. 클라이언트는 YARN(클러스터 매니저)에 응용프로그램을 제출한다.  
>2. YARN(클러스터 매니저)는 응용 프로그램에 대해 스파크 마스터를 할당한다.  
>3. 마스터와 동일한 노드에서 드라이버 프로세스가 생성된다.  
>4. 마스터는 YARN(클러스터 매니저)에게 실행자용 컨테이너를 요청한다.  
>5. 실행자는 마스터에 할당된 컨테이너 안에 생성된다.  
>6. 드라이버는 실행자와 통신한다.  
>7. 드라이버는 클라이언트에 진행률과 결과를 보고한다.  


### Reference
- <a href="#"> 파이썬을 활용한 스파크 프로그래밍 - 제프리 에이븐 </a>