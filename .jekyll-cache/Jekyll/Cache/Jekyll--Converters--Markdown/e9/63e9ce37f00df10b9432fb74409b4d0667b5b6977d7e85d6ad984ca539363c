I"_#<center><img src="../assets/img/spark/spark.png" style="width:300px;" /></center>

<p>스파크는 UC버클리의 마태 자하리아가 개발한 <strong><code class="highlighter-rouge">오픈소스 분산 쿼리 및 처리 엔진</code></strong>입니다. 2012년에 처음 배포되었으며, 코드는 아파치 재단에 기부되었습니다. 기존의 MapReduce에 비해 유연성과 확장성이 좋아서, 속도가 빠릅니다.</p>

<p><strong>스파크는 무엇을 할 수 있을 까요?</strong></p>
<blockquote>
  <p>데이터를 읽고, 변형하고, 합하고, 통계 모델을 학습할 수 있습니다.</p>
</blockquote>

<p><strong>스파크는 어떻게 접근할까요?</strong></p>
<blockquote>
  <p>java, scala, python, r, sql 등 다양한 언어를 통해 접근 가능합니다.</p>
</blockquote>

<p><strong>스파크가 제공해주는 라이브러리에는 무엇이 있을까요?</strong></p>
<blockquote>
  <ul>
    <li>스파크는 자체 데이터프레임을 제공합니다. python의 pandas 라이브러리, r의 frames, tables과 유사하지만 다른 점이 많습니다.</li>
    <li>SQL에서 사용하는 쿼리를 스파크에서도 사용할 수 있습니다.</li>
    <li>머신러닝을 위해서 MLib을 제공합니다.</li>
    <li>GraphX를 통해 그래프 처리를 할 수 있습니다.</li>
    <li>스파크 스트리밍이 가능합니다.</li>
  </ul>
</blockquote>

<h2 id="스파크의-실행-프로세스">스파크의 실행 프로세스</h2>

<p><img src="../assets/img/spark/sparkprocess.png" alt="sparkprocess" /></p>

<h2 id="스파크-응용-프로그램의-구조">스파크 응용 프로그램의 구조</h2>

<p><img src="../assets/img/spark/sparkarchi.png" alt="sparkarchi" /></p>

<blockquote>
  <p>드라이버<br />
클러스터 매니저<br />
마스터<br />
작업자 worker<br />
실행자 executer</p>
</blockquote>

<h2 id="마스터슬레이브-구조">마스터/슬레이브 구조</h2>

<p>스파크는 마스터/슬레이브 구조를 취합니다. 여기서 중앙 조정자는 드라이버라고 한다. 드라이버는 여러 개의 executor와 통신합니다.</p>

<h2 id="스파크-드라이버">스파크 드라이버</h2>

<p>스파크 드라이버는<code class="highlighter-rouge">스파크 응용 프로그램을 실행하는 데 필요한 작업을 계획하고 조정하는 프로세스</code>입니다. 드라이버의 역할을 정리하면 다음과 같습니다.</p>

<ul>
  <li>
    <p><strong>응용 프로그램을 task로 변환</strong> <br />
스파크 드라이버는 응용 프로그램을 task로 변환해 줍니다. task란 하나의 노드에서 실행되는 물리적 실행 단위입니다.</p>
  </li>
  <li>
    <p><strong>응용 프로그램 DAG 작성 및 계획</strong> <br />
드라이버는 응용 프로그램을 어떻게 실행할지 계획하기 위해 DAG(directed acyclic graph)를 작성하고, 작성된 DAG에 대해서 물리적인 실행 계획으로 변환합니다.</p>
  </li>
  <li>
    <p><strong>응용 프로그램 스케쥴링</strong> <br />
드라이버는 executor 프로세스에서의 개별 작업들을 위한 스케쥴링을 합니다. executor들은 task를 실행하고 rdd 데이터를 저장하는 프로세스인데요, 드라이버는 실행중인 executor를 살피고 각 task가 적절한 위치에서 실행될 수 있도록 노력합니다.</p>
  </li>
  <li>
    <p><strong>응용 프로그램의 결과 반환</strong><br />
드라이버는 클라이언트 측에 결과 데이터를 반환합니다. 포트 4040에 응용 프로그램 UI를 제공합니다. 4040 포트로 진입하면 각 응용 프로그램 별 stage, task 등을 확인할 수 있습니다.</p>
  </li>
</ul>

<h2 id="스파크-마스터-master">스파크 마스터 Master</h2>

<p><strong>클러스터의 리소스를 요청</strong>하고, 이를 드라이버에서 사용할 수 있게 만드는 프로세스.</p>
<blockquote>
  <p>예를 들어, 노드에 리소스나 컨테이너를 할당하고 그 상태를 추적하며 진행 상황을 모니터링한다. 마스터 호스트:8080에 접속하면 스파크 마스터 프로세스의 웹 UI를 제공받을 수 있다.</p>
</blockquote>

<h2 id="클러스터-매니저">클러스터 매니저</h2>

<ol>
  <li>적당한 <strong>마스터를 응용 프로그램에 할당</strong>합니다.</li>
  <li><strong>worker 노드를 모니터링</strong>하고 마스터가 요청한 대로 <strong>worker 노드의 리소스를 예약</strong>하는 프로세스</li>
</ol>

<p><strong>드라이버</strong>가 응용 프로그램 단위에서 조정을 하는 역할을 한다면, <strong>마스터</strong>는 단순히 클러스터 전체 내에서 리소스를 관리하는 역할을 한다. 클러스터 매니저는 마스터에 딸린 worker들을 모니터링하고 직접 리소스를 예약한다.</p>

<table>
  <thead>
    <tr>
      <th>구성 요소</th>
      <th>역할</th>
      <th>포트</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>스파크 드라이버</td>
      <td>응용 프로그램의 실행 및 단계를 조정함</td>
      <td>4040</td>
    </tr>
    <tr>
      <td>스파크 마스터</td>
      <td>리소스를 요청해서 드라이버가 사용할 수 있게 함</td>
      <td>8080</td>
    </tr>
    <tr>
      <td>클러스터 매니저</td>
      <td>worker노드를 모니터링하고, 마스터의 요청에 따라 worker 노드의 리소스를 예약함</td>
      <td> </td>
    </tr>
  </tbody>
</table>

<h2 id="작업자-worker-노드">작업자 Worker 노드</h2>

<p><strong><code class="highlighter-rouge">executor 프로세스를 호스팅하는 노드</code></strong>를 작업자 worker 노드라고 합니다. 여기에는 유한하거나 고정된 수의 실행자가 특정 시점에 할당 됩니다.</p>

<h2 id="실행자-executor">실행자 Executor</h2>

<p>executor 프로세스는 스파크 작업의 개별 task, 즉 dag 작업을 실행하는 작업 실행 프로세스입니다. 실행자는 작업자의 cpu, 메모리 등 리소스를 예약하기도 합니다. 즉,</p>

<ol>
  <li>애플리케이션을 구성하는 작업들을 실행하여 결과를 드라이버에 반환합니다.</li>
  <li>블록 매니저를 통해 rdd 저장 메모리를 제공합니다.</li>
</ol>

<p>응용 프로그램에 특화된 프로세스이며, 그 응용 프로그램이 완료되면 종료됩니다. 스파크 프로그램 하나는 여러개의 많은 실행자로 구성되어 있으며 병렬로 작업한다. 스파크 실행자의 JVM에는 전용 메모리 공간인 heap이 할당됩니다. 드라이버는 응용프로그램 전체를 관장하며, 작업자 및 실행자는 할당된 작업만 관장합니다.</p>

<h3 id="yarn리소스-매니저클러스터-매니저">YARN(리소스 매니저=클러스터 매니저)</h3>

<p>YARN은 하둡의 데이터 처리를 제어하고 조율하는 <code class="highlighter-rouge">프로세스 스케줄러</code>이다. YARN에서 실행되는 스파크 응용 프로그램의 배포모드는 클라이언트 모드와 클러스터 모드가 있다.</p>

<h3 id="클라이언트-모드">클라이언트 모드</h3>

<p>응용 프로그램의 드라이버 프로세스가 클라이언트에서 실행된다.</p>

<blockquote>
  <ol>
    <li>클라이언트는 YARN(리소스 매니저)에 응용프로그램을 제출한다. 드라이버, 스파크세션이 만들어져서 클라이언트에서 실행된다.</li>
    <li>YARN(리소스 매니저)은 응용 프로그램에 대해 스파크 마스터를 할당한다.</li>
    <li>스파크 마스터는 YARN에게 실행자로 사용될 컨테이너를 요청한다. 그러면 실행자가 생성된다.</li>
    <li>클라이언트에 속한 드라이버는 실행자와 통신한다.</li>
    <li>드라이버는 클라이언트에 진행률과 결과를 보고한다.</li>
  </ol>
</blockquote>

<h3 id="클러스터-모드">클러스터 모드</h3>

<p>응용 프로그램과 드라이브는 마스터의 하위 프로세스가 되어 클러스터에서 실행된다. 만약 마스터가 실패하면 다른 노드에서 다시 인스턴스화될 수 있다.</p>

<blockquote>
  <ol>
    <li>클라이언트는 YARN(클러스터 매니저)에 응용프로그램을 제출한다.</li>
    <li>YARN(클러스터 매니저)는 응용 프로그램에 대해 스파크 마스터를 할당한다.</li>
    <li>마스터와 동일한 노드에서 드라이버 프로세스가 생성된다.</li>
    <li>마스터는 YARN(클러스터 매니저)에게 실행자용 컨테이너를 요청한다.</li>
    <li>실행자는 마스터에 할당된 컨테이너 안에 생성된다.</li>
    <li>드라이버는 실행자와 통신한다.</li>
    <li>드라이버는 클라이언트에 진행률과 결과를 보고한다.</li>
  </ol>
</blockquote>

<h3 id="reference">Reference</h3>
<ul>
  <li><a href="#"> 파이썬을 활용한 스파크 프로그래밍 - 제프리 에이븐 </a></li>
</ul>
:ET