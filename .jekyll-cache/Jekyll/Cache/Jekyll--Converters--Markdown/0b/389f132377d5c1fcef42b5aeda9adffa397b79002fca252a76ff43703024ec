I"~4<h2 id="운영체제-소개">운영체제 소개</h2>

<h3 id="1-대표적인-운영체제">1. 대표적인 운영체제</h3>

<ul>
  <li>windows os, mac os, unix(가장 현대 운영체제 기술을 최초로 구현함.)</li>
  <li>unix os
    <ul>
      <li>70년대부터 개발되었다.</li>
      <li>unix 계열 os: 리눅스 os
        <ul>
          <li>unix와 사용법 및 os 구조가 유사한 os</li>
        </ul>
      </li>
      <li>리눅스 os
        <ul>
          <li>프로그래머, 전공자들이 잘 알아야하는 os</li>
          <li>인터넷 서비스를 구동시키는 서버 환경은 대부분 리눅스를 사용한다.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="2-운영체제의-역할">2. 운영체제의 역할</h3>

<blockquote>
  <ol>
    <li>시스템 지원 관리자</li>
    <li>사용자와 컴퓨터 사이의 커뮤니케이션 지원</li>
    <li>컴퓨터 하드웨어와 프로그램을 제어</li>
  </ol>
</blockquote>

<blockquote>
  <ol>
    <li>시스템 자원 관리자</li>
  </ol>
</blockquote>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>시스템 자원 = 하드웨어라고 보면됨.
    - cpu, memory, 입출력장치, 저장매체
- 하드웨어는 스스로 할 수 있는 것이 없다. 
    - cpu: 각 프로그램이 얼마나 cpu를 사용할지 cpu가 알아서 결정할 수 없다. 그것은 운영체제가 결정해준다. 
    - memory: 각 프로그램이 어느 주소에, 얼만큼의 메모리 공간을 확보해줘야하는 지도 운영체제가 결정해준다. 
    - 저장 매체: 어디에 어떤 file명으로, 어떻게 저장할지 스스로 결정할 수 없으므로 운영체제가 결정해준다. 
    - 입출력장치: 스스로 표시할 수 없음. 
- 그래서 운영체제가 필요하다. 
- OS가 미설치된 노트북? os가 없으면 하드웨어를 제어할 수 없어서 동작을 안한다.  -
</code></pre></div></div>

<h4 id="2-사용자와-컴퓨터-간의-커뮤니케이션을-지원">2. 사용자와 컴퓨터 간의 커뮤니케이션을 지원</h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- 사용자 &lt;-&gt; os &lt;-&gt; 컴퓨터 하드웨어
- 사용자와 하드웨어 간의 커뮤니케이션을 중재하는 역할을 운영체제가 한다. os가 없다면, 사용자가 컴퓨터에 명령을 내릴 수 있는 수단이 없다.   
</code></pre></div></div>

<h4 id="3-컴퓨터-하드웨어와-프로그램을-제어">3. 컴퓨터 하드웨어와 프로그램을 제어</h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    - 하드웨어 뿐만 아니라 프로그램을 제어한다. 
    - (그림)
    - 응용 프로그램 &lt;-&gt; os &lt;-&gt; 컴퓨터 하드웨어
    - os 구성 요소  
        - shell 소프트웨어: user interface에 해당하며, gui, batch, command line 등이 있다. 
    - os의 system call들
        - process management
        - main memory management
        - file management
        - disk management
        - io management
        - networking protection
</code></pre></div></div>

<h2 id="운영체제와-응용-프로그램">운영체제와 응용 프로그램</h2>

<ul>
  <li>프로그램 = 소프트웨어 = 운영체제, 응용 프로그램</li>
</ul>

<h3 id="1-응용-프로그램-과의-관계">1. 응용 프로그램 과의 관계</h3>

<ul>
  <li>
    <p>목표: 사용자가 사용하는 응용 프로그램이 효율적으로, 적절하게 동작하도록 지원해야함.</p>
  </li>
  <li>운영체제가 하는 일
    <ol>
      <li>응용 프로그램을 관리한다.
        <ul>
          <li><strong>실행</strong>시킨다.</li>
          <li><strong>권한</strong>을 관리해준다.
            <ul>
              <li>관리자 권한으로 실행</li>
            </ul>
          </li>
          <li>응용프로그램의 <strong>사용자</strong>를 관리해준다.
            <ul>
              <li>로그인 기능</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>시스템 자원을 관리한다.</li>
      <li>사용자와 컴퓨터간의 커뮤니케이션을 지원한다.</li>
    </ol>
  </li>
  <li>예시
    <ul>
      <li>예를 들어, 응용 프로그램에 무한 반복문을 넣는 등 잘못 작성해서 프로그램이 다운되는 경우 운영체제가 비정상적 동작을 하는 프로그램을 중지 시키는 등 관리를 해줄 수 있다.</li>
      <li>모든 파일 삭제 막기 (권한 / 사용자 관리)</li>
      <li>응용프로그램이 욕심이 많아서 cpu를 자기가 쓰겠다라고 하는 비정상적인 것을 운영체제가 막는다.</li>
    </ul>
  </li>
</ul>

<h3 id="2-운영체제는-어디에-있을까">2. 운영체제는 어디에 있을까?</h3>

<ul>
  <li>
    <p>운영체제는 SSD/HDD에 설치된다.</p>
  </li>
  <li>
    <p>컴퓨터를 부팅시 –&gt; 운영체제는 memory에 올라가게 됨</p>
  </li>
</ul>

<h2 id="운영-체제-역사">운영 체제 역사</h2>

<table>
  <thead>
    <tr>
      <th>연도</th>
      <th>요약</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1950</td>
      <td>운영체제가 없음</td>
    </tr>
    <tr>
      <td>1960</td>
      <td>배치 처리 시스템</td>
    </tr>
    <tr>
      <td>1970</td>
      <td>시분할시스템,멀티태스킹,멀티프로그래밍,unix(c언어)</td>
    </tr>
    <tr>
      <td>1980</td>
      <td>gui,pc도입</td>
    </tr>
    <tr>
      <td>1990</td>
      <td>다양한 응용 프로그램, 인터넷, 오픈 소스 운동</td>
    </tr>
    <tr>
      <td>2000</td>
      <td>오픈 소스 활성화, 가상머신, 대용량병렬처리</td>
    </tr>
  </tbody>
</table>

<h3 id="1-1950-1960">1. 1950-1960</h3>

<ul>
  <li>1950년대
    <ul>
      <li><strong>ENIAC</strong> : 최초의 컴퓨터</li>
      <li>당시에는 운영체제가 없었다.</li>
      <li>1개의 응용 프로그램을 실행시키기도 바빴음.</li>
      <li>응용 프로그램이 시스템 자원을 직접 제어했음.</li>
      <li>진공관을 가지고 0,1로 프로그램을 만들었다.</li>
    </ul>
  </li>
  <li>1960년대
    <ul>
      <li>프로그램 종류가 많아지고 사용자도 많아지기 시작함.</li>
      <li>앞 프로그램이 언제 끝날지 모른다.</li>
      <li>앞 프로그램이 끝나면 자동으로 실행하게 하면 좋을 것 같다.</li>
      <li><strong>배치 처리 시스템</strong> batch processing system
        <ul>
          <li>여러 응용 프로그램을 등록시켜 놓고 순차적으로 실행하는 시스템</li>
          <li>운영체제의 기반</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="2-1960-후반---시분할-시스템-멀티태스킹">2. 1960 후반 - 시분할 시스템, 멀티태스킹</h3>

<ul>
  <li>배치 처리 시스템의 단점
    <ul>
      <li>컴퓨터 응답 시간이 오래 걸림 (앞단에 시간이 많이 필요한 프로그램이 있을 경우 뒷단의 프로그램은 오래 기다려야함.)</li>
      <li>실행 시간이 오래 걸림 (cpu가 필요없는 떄에도 응용프로그램이 cpu를 점유하고 있을 수 있으므로)</li>
    </ul>
  </li>
  <li>1960년대 후반
    <ul>
      <li>시분할 시스템 time sharing system</li>
      <li>멀티 태스킹 multi tasking</li>
      <li>실제 구현되지는 않았음</li>
    </ul>
  </li>
  <li>시분할 시스템, 멀티 태스킹, 멀티 프로그래밍
    <ul>
      <li>응용 프로그램의 cpu 사용 시간을 잘개 쪼개서 여러개의 응용 프로그램을 동시에 실행하게 하는 기법</li>
      <li>컴퓨터 응답 시간을 줄일 수 있음 (시분할 시스템)</li>
      <li>전체 응용 프로그램의 실행 시간을 줄일 수 있음 (멀티 프로그래밍)</li>
      <li>여러 응용프로그램이 동시에 실행되는 것처럼 느껴진다 (멀티 태스킹)</li>
    </ul>
  </li>
  <li>시분할 시스템 time sharing system
    <ul>
      <li>목적: 다중 사용자를 지원하고, 컴퓨터 응답 시간을 최소화하는 것을 목적으로 한다.</li>
      <li>app A이 8시간, app B이 3시간, app C이 2시간이 걸린다고 할 때,
        <ul>
          <li>배치 처리 시스템에서는 하나씩 순차적으로 실행시킨다.</li>
          <li>시분할 시스템: 다중 사용자를 지원한다.
            <ul>
              <li>다중 사용자를 지원하려면 컴퓨터 응답 시간을 최소화해야한다.</li>
              <li>a-b-c-a-b-c-a-b-a-a-a-a-a 순으로 실행</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>멀티 태스킹 multi tasking
    <ul>
      <li>목적: 가능한한 cpu를 많이 활용하도록 하는 기능</li>
      <li>멀티 태스킹: 단일 cpu에서 여러 응용프로그램의 병렬 실행을 가능케 하는 시스템</li>
      <li>시간을 잘게 쪼개서 마치 동시 실행인 것처럼 보이는 것을 구축한다.</li>
    </ul>
  </li>
  <li>멀티 프로그래밍 multi programming
    <ul>
      <li>목적: 최대한 cpu를 많이 활용하도록 하기 위해 시간대비 cpu 활용도를 높이는 것.</li>
      <li>cpu에서 실행하는것과 저장매체 왔다갔다하는것은 시간 차이가 난다.</li>
      <li>저장매체에서 읽어오는 시간 동안에 cpu에서 다른 응용프로그램으로 바꿔서 실행함.</li>
      <li>저장매체에서 읽어오면 다시 원래의 프로그램을 실행함.</li>
      <li>cpu는 한번도 쉬지 않는다.</li>
    </ul>
  </li>
</ul>

<h3 id="4-1970">4. 1970</h3>

<ul>
  <li>UNIX OS 출시
    <ul>
      <li>미국 at&amp;t의 벨 연구소에서 개발
        <ul>
          <li>켄톰슨, 데니스 리치(c언어 개발자)</li>
          <li>c언어로 만듦.</li>
        </ul>
      </li>
      <li>이전에는 assembly 언어로 소프트웨어 언어로 개발하였다.
        <ul>
          <li>cpu 명령어, memory 물리적 주소를 직접 지정함.</li>
          <li>컴퓨터마다 각각 다시 개발해줘야하는 단점이 있음</li>
          <li>프로그래밍 복잡도가 높음.</li>
        </ul>
      </li>
      <li>1970년대에 c언어가 개발됨.
        <ul>
          <li>컴파일러 : c언어 코드를 어셈블리어로 바꿔준다.</li>
          <li>프로그래밍 복잡도가 어셈블리 언어에 비해서는 낮다.
            <blockquote>
              <p>c언어를 기반으로 운영체제를 개발했다.</p>
            </blockquote>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>UNIX의 특징
    <ul>
      <li>현대 운영체제의 기본 기술을 모두 포함한 최초의 운영체제
        <ul>
          <li>기본 기술
            <ul>
              <li>멀티태스킹</li>
              <li>시분할 시스템</li>
              <li>멀티 프로그래밍
***</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="5-1980">5. 1980</h3>

<ul>
  <li>개인용 컴퓨터 시대 돌입.
    <ul>
      <li>1980년대 이전에는 대형 컴퓨터를 여러명이 접속해서 사용했음 (UNIX) : 시분할 시스템 때문이었음. 다중 사용자를 지원했었다.</li>
      <li>1980년대부터는 PC가 보급, 대중화되기 시작하는 시점임.</li>
      <li>용어 이해
        <ul>
          <li>CLI: command line interface, 터미널 환경.</li>
          <li>GUI: graphical user interface, gui 환경.</li>
        </ul>
      </li>
      <li>1980년대 초반은 거의 다 터미널 환경</li>
      <li>1980년대 후반부터 gui 환경 등장하기 시작.</li>
      <li>참고영상 : microsoft &amp; apple oss: a visual history</li>
      <li>1984년에 애플의 매킨토시에서 뭔가 gui스러운게 등장함. 마우스로 조작하기 시작함.</li>
    </ul>
  </li>
</ul>

<h3 id="6-1990">6. 1990</h3>

<ul>
  <li>gui+pc 컴퓨터를 활용한 응용 프로그램 시대 개막
    <ul>
      <li>엑셀, 워드 프로세서 등등</li>
    </ul>
  </li>
  <li>window os의 대중화</li>
  <li>네트워크 기술 발전으로 인한 www 인터넷 대중화</li>
  <li>오픈 소스 운동 활성화 시작
    <ul>
      <li>unix os 개발 후, 기술을 공유해야한다는 주장 등장</li>
      <li>unix 계열 ox + 응용 프로그램 개발한 소스를 오픈하기 시작</li>
      <li>Linux 리눅스 os 등장 : 소스 오픈되며 무료임.</li>
    </ul>
  </li>
</ul>

<h3 id="7-2000">7. 2000</h3>

<ul>
  <li>오픈 소스 활성화
  -아파치: 웹서버라는 프로그램 중에 가장 유명하며, 오픈 소스임
  -리눅스: 운영체제
  -MySQL: 데이터베이스, 대용량 데이터를 관리하는 프로그램.
  -안드로이드, 딥러닝, 데이터사이언스, IoT 관련 소프트웨어가 오픈 소스로 만들어짐.</li>
  <li>가상 머신 기술, 대용량 병렬 처리 기술 활성화
  -컴퓨터 os에 os 여러개를 깔아서 동시 실행하게 함
  -cpu가 여러개 들어가 있는데, 여러개의 코어를 동시에 실행시킴.</li>
</ul>

<h3 id="reference">Reference</h3>
<ul>
  <li><a href="http://www.fastcampus.co.kr">fast campus 강의</a></li>
</ul>
:ET